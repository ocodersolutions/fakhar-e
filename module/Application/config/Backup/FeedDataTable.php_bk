<?php

namespace Application\Model;

use Zend\Db\Adapter\Adapter;
use Zend\Db\TableGateway\AbstractTableGateway;
use Zend\Db\Sql\Sql;
use Zend\Db\Sql\Delete;
use Zend\Db\Sql\Update;
use Zend\Db\Sql\Select;
use Zend\Db\Sql\Expression;
use Zend\Paginator\Paginator;
use Zend\Db\ResultSet\ResultSet;
use Zend\Paginator\Adapter\Iterator as paginatorIterator;
use Zend\Paginator\Adapter\DbSelect;

class FeedDataTable extends BasicTableAdapter {

    protected $table = 'FeedData';
    protected $productAttributesTable = 'ProductAttributes';
    protected $images_table = 'FeedData_Images';
    protected $oFeedCatagory = null;
    protected $sDuplicateUpdateStr = '';

    public function initialize() {
        $updateAllowdItems = array('brand', 'caption', 'color', 'name', 'keywords', 'description', 'sku', 'currency', 'price', 'buyurl', 'impressionurl', 'imageurl', 'advertisercategory', 'instock', 'condition', 'format', 'manufacturerid', 'promotionaltext', 'retailprice', 'saleprice', 'standardshippingcost', 'thirdpartycategory', 'title');
        $updateItems = array();
        foreach ($updateAllowdItems as $vItem) {
            $updateItems[] = "`$vItem` = VALUES( `$vItem` )";
        }

        $updateStr = ' ON DUPLICATE KEY UPDATE `item_count` = `item_count` + 1 ';

        if (count($updateItems)) {
            $updateStr .= ', ' . implode(', ', $updateItems);
        }

        $this->sDuplicateUpdateStr = $updateStr;

        return $this;
    }

    public function insertData($aData) {
        $oAdapter = $this->getDBAdapter();
        $sql = new Sql($oAdapter);

        $oInsert = $sql->insert($this->table)->values($aData['basicData']);
        $sql->prepareStatementForSqlObject($oInsert);
        $sInsertString = $oInsert->getSqlString($oAdapter->getPlatform());
        //echo "$sInsertString \n"; exit(0);
        /* if( !empty($aInsertArray['fysCategory']) ) {
          $this->addToFeedImages( $aInsertArray['imageurl'], $this->getDBAdapter()->getDriver()->getLastGeneratedValue() );
          } */


        $this->getDBAdapter()->query($sInsertString . $this->sDuplicateUpdateStr)->execute();

        $this->getServiceLocator()->get('ProductAttributesTable')->addProductAttributes($aData['basicData']['uid'], $aData['attributes']);

        //return $this->getDBAdapter()->getDriver()->getLastGeneratedValue();
        return $aData['basicData']['uid'];
    }

    /*
      private function addToFeedImages( $sImage, $iProductId )
      {
      $this->getDBAdapter()
      ->query(  "INSERT INTO {$this->images_table} (`imageurl`, `productIds`)
      VALUES ('{$sImage}', '{$iProductId}')
      ON DUPLICATE KEY UPDATE `productIds` = CONCAT(`productIds`,',','{$iProductId}')"  )
      ->execute();
      }
     */

    public function truncateTables() {
        /* $dbAdpr = $this->getDBAdapter();
          $dbAdpr->query( "TRUNCATE {$this->table};" )->execute();
          $dbAdpr->query( "TRUNCATE {$this->productAttributesTable};" )->execute(); */
        $sql = new Sql($this->getDBAdapter());

        $update = new Update();
        $update->table($this->table)->set(array('item_count' => 0));
        $sql->prepareStatementForSqlObject($update)->execute();

        $this->getServiceLocator()->get('ProductAttributesTable')->reset();
    }

    public function getImageURL($sProgramDir, $sImage) {
        $sql = new Sql($this->getDBAdapter());

        $select = new Select();
        $select->from(array('f' => $this->table))
                ->where("`img_program_dir` = '{$sProgramDir}' and `img_local_name` = '{$sImage}'");

        $data = $sql->prepareStatementForSqlObject($select)->execute()->current();
        if (isset($data['imageurl'])) {
            return $data['imageurl'];
        } else {
            return false;
        }
    }

    /*
      public function assignRandomProcessIds()
      {
      $sql = new Sql($this->getDBAdapter());

      $update = new Update();
      $update->table($this->images_table);
      $update->set( array('processId'=> new Expression('(FLOOR(1 + RAND() * 10))')));
      $sql->prepareStatementForSqlObject($update)->execute();
      }

      public function getFeedImagesByProcessId( $iProcessId )
      {
      $sql = new Sql($this->getDBAdapter());

      $select = new Select();
      $select->from(array('f' => $this->images_table))
      ->where( "processId = {$iProcessId}" );

      return $sql->prepareStatementForSqlObject($select)->execute();
      }

      public function updateFeedDataWithImageInfo( $aImage, $urlInfo )
      {
      $ext = 'unk';

      if( isset($urlInfo['content_type']) ) {

      switch (@$urlInfo['content_type']) {
      case 'image/jpeg':	$ext = 'jpg';	break;
      }

      if( $ext != 'unk' && isset($urlInfo['download_content_length']) && $urlInfo['download_content_length'] > 0 ) {
      $localFileName = md5(base64_encode($aImage['imageurl'].'_'.@$urlInfo['download_content_length'])) . ".{$ext}";
      }
      else {
      $localFileName = $urlInfo['content_type'] = $urlInfo['download_content_length'] = $aImage['programname'] = '';
      }
      }
      else {
      $localFileName = $urlInfo['content_type'] = $urlInfo['download_content_length'] = $aImage['programname'] = '';
      }


      $updateArr = array(
      'img_content_type'				=>	@$urlInfo['content_type'],
      'img_download_content_length'	=>	@$urlInfo['download_content_length'],
      'img_local_name'				=>	$localFileName
      );

      $sql = new Sql($this->getDBAdapter());
      $update = new Update();
      $update->table($this->table)->set( $updateArr )->where( "id in ({$aImage['productIds']})" );
      $sql->prepareStatementForSqlObject($update)->execute();
      }
     */
    /* public function getFeedData()
      {
      $sql = new Sql($this->getDBAdapter());

      $select = new Select();
      $select->from(array('f' => $this->table))
      ->where('fysCategory != "" and fysCategory is not null');//->limit(8);

      $paginator = new Paginator(new paginatorIterator($albums));
      return $paginator;

      //return $sql->prepareStatementForSqlObject($select)->execute();
      } */

    public function getFeedData($aPostParams = array(), $paginated = false, $userId = null) {
        $sWhere = ' 1 ';
        if (isset($aPostParams['infoStatus']) && $aPostParams['infoStatus'] == 'yes') {
            $sWhere .= " AND `productInfoAdded` = 'yes' ";

            if (isset($aPostParams['start_date']) && preg_match("/^\d{4}-\d{1,2}-\d{1,2}/", $aPostParams['start_date'])) {
                $sWhere .= " AND `productInfoAddDate` >= '{$aPostParams['start_date']}' ";
            }

            if (isset($aPostParams['end_date']) && preg_match("/^\d{4}-\d{1,2}-\d{1,2}/", $aPostParams['end_date'])) {
                $sWhere .= " AND `productInfoAddDate` <= '{$aPostParams['end_date']}' ";
            }
        } else if (isset($aPostParams['infoStatus']) && $aPostParams['infoStatus'] == 'no') {
            $sWhere .= " AND `productInfoAdded` = 'no' ";
        }

        if (isset($aPostParams['category']) && $aPostParams['category'] != 'all') {
            $sWhere .= " AND `advertisercategory` = '{$aPostParams['category']}' ";
        }


        if ($paginated) {


            $sql = new Sql($this->getServiceLocator()->get('db'));
            $select = $sql->select(array('feed' => $this->table));
            $select->columns(array('feeddataid' => 'id', 'feedId', 'uid', 'caption' => 'caption', 'color' => 'color', 'name' => 'name', 'sku' => 'sku', 'currency', 'price', 'buyurl', 'impressionurl', 'img_local_name', 'feedimageurl' => 'imageurl'))
                    ->join(array("Al" => 'ArticleCloseset'), new Expression("(Al.feeddataid = feed.id)"), array('likesCount' => new Expression('COUNT(Al.closesetid)')), 'left');
            if (isset($userId) && !empty($userId)) {

                $select->where(array('Al.userId' => $userId));
            }
            $select->where($sWhere);
            $select->group('feed.id');
            //echo $sql->getSqlStringForSqlObject($select);die;
            $resultSetPrototype = new ResultSet();
            $resultSetPrototype->setArrayObjectPrototype(new FeedData());
            $paginatorAdapter = new DbSelect(
                    $select, $this->tableGateway->getAdapter(), $resultSetPrototype
            );
            $paginator = new Paginator($paginatorAdapter);
            return $paginator;
        }
        $resultSet = $this->tableGateway->select();
        return $resultSet;
    }

    public function getItem($iPID) {
        $sql = new Sql($this->getDBAdapter());

        $select = new Select();
        $select->from(array('t' => $this->table))
                ->where("id = {$iPID}");

        return $sql->prepareStatementForSqlObject($select)->execute()->current();
    }

    public function getAdvertiserCaegoryList() {
        $sql = new Sql($this->getDBAdapter());

        $select = new Select();
        $select->from(array('t' => $this->table))
                ->columns(array('advertisercategory'))
                ->group('advertisercategory')
                ->order('advertisercategory');

        return $sql->prepareStatementForSqlObject($select)->execute();
    }

    public function finalize() {
        $sql = new Sql($this->getDBAdapter());
        $update = new Update();
        $update->table($this->table)
                ->set(array('img_local_name' => new Expression('id')))
                ->where("img_local_name is null or img_local_name = ''");
        $sql->prepareStatementForSqlObject($update)->execute();
    }

    public function updateLocalImage($iPID, $sFileName) {
        $sql = new Sql($this->getDBAdapter());
        $update = new Update();
        $update->table($this->table)
                ->set(array('img_local_name' => $sFileName))
                ->where("id = {$iPID}");
        $sql->prepareStatementForSqlObject($update)->execute();
    }

    public function getFilterFeedData($aPostParams = array(), $paginated = false, $userId) {
        $feedmapbrandJoin = false;
        $prodattJoin = false;

        $sWhere = ' 1 ';
        if (isset($aPostParams['infoStatus']) && $aPostParams['infoStatus'] == 'yes') {
            $sWhere .= " AND `productInfoAdded` = 'yes' ";

            if (isset($aPostParams['start_date']) && preg_match("/^\d{4}-\d{1,2}-\d{1,2}/", $aPostParams['start_date'])) {
                $sWhere .= " AND `productInfoAddDate` >= '{$aPostParams['start_date']}' ";
            }

            if (isset($aPostParams['end_date']) && preg_match("/^\d{4}-\d{1,2}-\d{1,2}/", $aPostParams['end_date'])) {
                $sWhere .= " AND `productInfoAddDate` <= '{$aPostParams['end_date']}' ";
            }
        } else if (isset($aPostParams['infoStatus']) && $aPostParams['infoStatus'] == 'no') {
            $sWhere .= " AND `productInfoAdded` = 'no' ";
        }

        if (isset($aPostParams['category']) && $aPostParams['category'] != 'all') {
            $sWhere .= " AND `advertisercategory` = '{$aPostParams['category']}' ";
        }

        if (!empty($aPostParams['catids'])) {
            $sWhere .= " AND prodatt.value IN (" . $aPostParams['catids'] . ")";
            $prodattJoin = true;
        }

        if (!empty($aPostParams['colors'])) {
            $sWhere.= " AND FIND_IN_SET(feed.color,'{$aPostParams['colors']}')";
        }
        if (!empty($aPostParams['stores'])) {
            // $sWhere .= " AND FIND_IN_SET(feedmapbrand.id,'{$aPostParams['brands']}')";
            /* $allStores=  explode(',',$aPostParams['stores']);
              if(!empty($allStores))
              {
              $sWhere.= " AND FIND_IN_SET(feed.id,feedmapstore.value)";
              } */
            $sWhere.=" AND feedmapstore.id IN ({$aPostParams['stores']})";
            $feedmapbrandJoin = true;
        }
        if (!empty($aPostParams['deals'])) {
            
        }
        //if (!empty($aPostParams['minamount']) && !empty($aPostParams['maxamount'])) {
        $sWhere .= " AND feed.price BETWEEN " . $aPostParams['minamount'] . " AND " . $aPostParams['maxamount'];
        //}

        if (!empty($aPostParams['duration'])) {
            
        }

        if (!empty($aPostParams['onsale'])) {
            $sWhere.=" AND feed.onsale='Y'";
        }
        if (!empty($aPostParams['todaynew'])) {
            $sWhere.=" AND feed.dateadded=CURRENT_DATE";
        }
        if (!empty($aPostParams['newthisweek'])) {
            $sWhere.=" AND feed.dateadded BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL (SELECT DAYOFWEEK(NOW())+1) DAY) AND CURRENT_DATE";
        }
        if (!empty($aPostParams['freeshipping'])) {
            $sWhere.=" AND feed.freeshipping='Y'";
        }
        if (!empty($aPostParams['specialoffer'])) {
            $sWhere.=" AND feed.specialoffer='Y'";
        }
        if (!empty($aPostParams['discountcode'])) {
            $sWhere.=" AND feed.discountcode='Y'";
        }

        if (!empty($aPostParams['brands'])) {
            $feedmapbrandJoin = true;
            $sWhere .= " AND FIND_IN_SET(feedmapbrand.id,'{$aPostParams['brands']}')";
        }

        $offSet = (isset($aPostParams['offset'])) ? $aPostParams['offset'] : 0;
        $limit = (isset($aPostParams['limit'])) ? $aPostParams['limit'] : 8;


        $sql = new Sql($this->getServiceLocator()->get('db'));
        $select = $sql->select(array('feed' => $this->table));
        $select->columns(array('feeddataid' => 'id', 'feedId', 'uid', 'caption' => 'caption', 'color' => 'color', 'name' => 'name', 'sku' => 'sku', 'currency', 'price', 'buyurl', 'impressionurl', 'img_local_name', 'feedimageurl' => 'imageurl'))
                ->join(array("Al" => 'ArticleCloseset'), new Expression("(Al.feeddataid = feed.id)"), array('likesCount' => new Expression('COUNT(Al.closesetid)')), 'left')
                ->where($sWhere)
                ->group('feed.id')
                ->limit($limit)
                ->offset($offSet);
        
        if($prodattJoin){
            $select->join(array("prodatt" => 'ProductAttributes'), new Expression("(feed.uid=prodatt.productUID AND prodatt.type = 'categories')"))
                ->group('prodatt.productUID');
        }
        if($feedmapbrandJoin){
            $select->join(array("feedmapbrand" => 'FeedsMapping'), new Expression("(feedmapbrand.title=feed.brand AND feedmapbrand.mappingType='brand')"));
        }
        if (!empty($aPostParams['stores'])) {
            $select->join(array("feedmapstore" => 'FeedsMapping'), new Expression("(feedmapstore.feedId=feed.feedId AND feedmapstore.mappingType='store')"), array());
        }
        if (isset($userId) && !empty($userId)) {

            $select->where(array('Al.userId' => $userId));
        }
        $resultSet = array();
        //echo $sql->getSqlStringForSqlObject($select);die;
        $results = $sql->prepareStatementForSqlObject($select)->execute();
        $resultSet = new \Zend\Db\ResultSet\ResultSet();
        $resultSet->initialize($results);
        $resultSet = $resultSet->toArray();
        return $resultSet;
    }

    public function getMaxRangePrice() {
        $sql = new Sql($this->getServiceLocator()->get('db'));
        $select = $sql->select(array('feed' => $this->table));
        $select->columns(array('MAXPRICE' => new Expression('MAX(price)')));
        $resultSet = array();
        $results = $sql->prepareStatementForSqlObject($select)->execute();
        $resultSet = new \Zend\Db\ResultSet\ResultSet();
        $resultSet->initialize($results);
        $resultSet = $resultSet->toArray();
        $maxPrice = number_format($resultSet[0]['MAXPRICE'], 0);
        $priceLen = strlen($maxPrice) - 1;
        $maxPrice = substr($maxPrice, 0, 1) + 1;
        $maxPrice = $maxPrice * ( pow(10, $priceLen));
        return $maxPrice;
    }

}
